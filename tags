!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
==	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def ==(hsh2)$/;"	f	class:BitBucket.CoreExt.OrderedHash
ACCEPT	lib/bitbucket_rest_api/constants.rb	/^    ACCEPT = 'Accept'.freeze$/;"	C	class:BitBucket.Constants
ACCEPT_CHARSET	lib/bitbucket_rest_api/constants.rb	/^    ACCEPT_CHARSET = 'Accept-Charset'.freeze$/;"	C	class:BitBucket.Constants
ALLOWED_OPTIONS	lib/bitbucket_rest_api/connection.rb	/^    ALLOWED_OPTIONS = [$/;"	C	class:BitBucket.Connection
API	lib/bitbucket_rest_api/api.rb	/^  class API$/;"	c	class:BitBucket
API	lib/bitbucket_rest_api/api/actions.rb	/^  class API$/;"	c	class:BitBucket
AUTH_HEADER	lib/bitbucket_rest_api/request/oauth.rb	/^      AUTH_HEADER  = 'Authorization'.freeze$/;"	C	class:BitBucket.Request.OAuth
Account	lib/bitbucket_rest_api/users/account.rb	/^  class Users::Account < API$/;"	c	class:BitBucket.Users	inherits:API
ApiFactory	lib/bitbucket_rest_api/api_factory.rb	/^  class ApiFactory$/;"	c	class:BitBucket
Array	lib/bitbucket_rest_api/core_ext/array.rb	/^class Array # :nodoc:$/;"	c
Authorization	lib/bitbucket_rest_api/authorization.rb	/^  module Authorization$/;"	m	class:BitBucket
AutoloadHelper	lib/bitbucket_rest_api.rb	/^  module AutoloadHelper$/;"	m	class:BitBucket
BadRequest	lib/bitbucket_rest_api/error/bad_request.rb	/^    class BadRequest < ServiceError$/;"	c	class:BitBucket.Error	inherits:ServiceError
BasicAuth	lib/bitbucket_rest_api/request/basic_auth.rb	/^    class BasicAuth < Faraday::Middleware$/;"	c	class:BitBucket.Request	inherits:Faraday.Middleware
BitBucket	lib/bitbucket_rest_api.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/api.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/api/actions.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/api_factory.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/authorization.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/client.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/configuration.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/connection.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/constants.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/deprecation.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/error.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/error/bad_request.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/error/client_error.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/forbidden.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/internal_server_error.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/invalid_options.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/not_found.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/required_params.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/service_error.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/service_unavailable.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/unauthorized.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/unknown_value.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/unprocessable_entity.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/error/validations.rb	/^module BitBucket #:nodoc$/;"	m
BitBucket	lib/bitbucket_rest_api/invitations.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/issues.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/issues/comments.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/issues/components.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/issues/milestones.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/normalizer.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/parameter_filter.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/changesets.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/commits.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/download.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/following.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/forks.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/keys.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/pull_request.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/services.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/repos/sources.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/request.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/request/basic_auth.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/request/jsonize.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/request/oauth.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response/helpers.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response/jsonize.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response/mashify.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response/raise_error.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/response/xmlize.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/result.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/user.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/users.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/users/account.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/utils/url.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/validations.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/validations/format.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/validations/presence.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/validations/required.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/validations/token.rb	/^module BitBucket$/;"	m
BitBucket	lib/bitbucket_rest_api/version.rb	/^module BitBucket$/;"	m
BitBucketError	lib/bitbucket_rest_api/error.rb	/^    class BitBucketError < StandardError$/;"	c	class:BitBucket.Error	inherits:StandardError
CACHE_CONTROL	lib/bitbucket_rest_api/constants.rb	/^    CACHE_CONTROL = 'cache-control'.freeze$/;"	C	class:BitBucket.Constants
CONTENT_LENGTH	lib/bitbucket_rest_api/constants.rb	/^    CONTENT_LENGTH = 'content-length'.freeze$/;"	C	class:BitBucket.Constants
CONTENT_TYPE	lib/bitbucket_rest_api/constants.rb	/^    CONTENT_TYPE = 'Content-Type'.freeze$/;"	C	class:BitBucket.Constants
CONTENT_TYPE	lib/bitbucket_rest_api/request/jsonize.rb	/^    CONTENT_TYPE = 'Content-Type'.freeze$/;"	C	class:BitBucket.Request.Jsonize
CONTENT_TYPE	lib/bitbucket_rest_api/response.rb	/^    CONTENT_TYPE = 'Content-Type'.freeze$/;"	C	class:BitBucket.Response
Changesets	lib/bitbucket_rest_api/repos/changesets.rb	/^  class Repos::Changesets < API$/;"	c	class:BitBucket.Repos	inherits:API
Client	lib/bitbucket_rest_api/client.rb	/^  class Client < API$/;"	c	class:BitBucket	inherits:API
ClientError	lib/bitbucket_rest_api/error/client_error.rb	/^    class ClientError < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
Comments	lib/bitbucket_rest_api/issues/comments.rb	/^  class Issues::Comments < API$/;"	c	class:BitBucket.Issues	inherits:API
Commits	lib/bitbucket_rest_api/repos/commits.rb	/^  class Repos::Commits < API$/;"	c	class:BitBucket.Repos	inherits:API
Components	lib/bitbucket_rest_api/issues/components.rb	/^  class Issues::Components < API$/;"	c	class:BitBucket.Issues	inherits:API
Configuration	lib/bitbucket_rest_api/configuration.rb	/^  module Configuration$/;"	m	class:BitBucket
Connection	lib/bitbucket_rest_api/connection.rb	/^  module Connection$/;"	m	class:BitBucket
Constants	lib/bitbucket_rest_api/constants.rb	/^  module Constants$/;"	m	class:BitBucket
CoreExt	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^  module CoreExt #:nodoc:$/;"	m	class:BitBucket
DATE	lib/bitbucket_rest_api/constants.rb	/^    DATE = 'Date'.freeze$/;"	C	class:BitBucket.Constants
DEFAULT_ACCESS_TOKEN	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_ACCESS_TOKEN       = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_ADAPTER	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_ADAPTER            = :net_http$/;"	C	class:BitBucket.Configuration
DEFAULT_BASIC_AUTH	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_BASIC_AUTH         = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_CLIENT_ID	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_CLIENT_ID          = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_CLIENT_SECRET	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_CLIENT_SECRET      = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_CONNECTION_OPTIONS	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_CONNECTION_OPTIONS = { }$/;"	C	class:BitBucket.Configuration
DEFAULT_ENDPOINT	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_ENDPOINT           = 'https:\/\/bitbucket.org\/api'.freeze$/;"	C	class:BitBucket.Configuration
DEFAULT_LOGIN	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_LOGIN              = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_MIME_TYPE	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_MIME_TYPE          = :json$/;"	C	class:BitBucket.Configuration
DEFAULT_OAUTH_SECRET	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_OAUTH_SECRET       = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_OAUTH_TOKEN	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_OAUTH_TOKEN        = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_PASSWORD	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_PASSWORD           = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_QUERY_SEP	lib/bitbucket_rest_api/utils/url.rb	/^      DEFAULT_QUERY_SEP = \/[&;] *\/n$/;"	C	class:BitBucket.Utils.Url
DEFAULT_REPO	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_REPO               = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_REPO_OPTIONS	lib/bitbucket_rest_api/repos.rb	/^    DEFAULT_REPO_OPTIONS = {$/;"	C	class:BitBucket.Repos
DEFAULT_REPO_OPTIONS	lib/bitbucket_rest_api/repos/forks.rb	/^    DEFAULT_REPO_OPTIONS = {$/;"	C	class:BitBucket.Repos.Forks
DEFAULT_USER	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_USER               = nil$/;"	C	class:BitBucket.Configuration
DEFAULT_USER_AGENT	lib/bitbucket_rest_api/configuration.rb	/^    DEFAULT_USER_AGENT         = "BitBucket Ruby Gem #{BitBucket::VERSION::STRING}".freeze$/;"	C	class:BitBucket.Configuration
DEFAULT_USER_OPTIONS	lib/bitbucket_rest_api/user.rb	/^    DEFAULT_USER_OPTIONS = {$/;"	C	class:BitBucket.User
DEPRECATION_PREFIX	lib/bitbucket_rest_api/deprecation.rb	/^  DEPRECATION_PREFIX = "[BitBucketAPI] Deprecation warning:"$/;"	C	class:BitBucket
Download	lib/bitbucket_rest_api/repos/download.rb	/^  class Repos::Download < API$/;"	c	class:BitBucket.Repos	inherits:API
ETAG	lib/bitbucket_rest_api/constants.rb	/^    ETAG = 'ETag'.freeze$/;"	C	class:BitBucket.Constants
Error	lib/bitbucket_rest_api/error.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/bad_request.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/client_error.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/forbidden.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/internal_server_error.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/invalid_options.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/not_found.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/required_params.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/service_error.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/service_unavailable.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/unauthorized.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/unknown_value.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/unprocessable_entity.rb	/^  module Error$/;"	m	class:BitBucket
Error	lib/bitbucket_rest_api/error/validations.rb	/^  module Error$/;"	m	class:BitBucket
Following	lib/bitbucket_rest_api/repos/following.rb	/^  class Repos::Following < API$/;"	c	class:BitBucket.Repos	inherits:API
Forbidden	lib/bitbucket_rest_api/error/forbidden.rb	/^    class Forbidden < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
Forks	lib/bitbucket_rest_api/repos/forks.rb	/^  class Repos::Forks < API$/;"	c	class:BitBucket.Repos	inherits:API
Format	lib/bitbucket_rest_api/validations/format.rb	/^    module Format$/;"	m	class:BitBucket.Validations
HEADER_LAST	lib/bitbucket_rest_api/constants.rb	/^    HEADER_LAST = "X-Last".freeze$/;"	C	class:BitBucket.Constants
HEADER_LINK	lib/bitbucket_rest_api/constants.rb	/^    HEADER_LINK = "Link".freeze$/;"	C	class:BitBucket.Constants
HEADER_NEXT	lib/bitbucket_rest_api/constants.rb	/^    HEADER_NEXT = "X-Next".freeze$/;"	C	class:BitBucket.Constants
Hash	lib/bitbucket_rest_api/core_ext/hash.rb	/^class Hash # :nodoc:$/;"	c
Helpers	lib/bitbucket_rest_api/response/helpers.rb	/^  class Response::Helpers < Response$/;"	c	class:BitBucket.Response	inherits:Response
InternalServerError	lib/bitbucket_rest_api/error/internal_server_error.rb	/^    class InternalServerError < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
InvalidOptions	lib/bitbucket_rest_api/error/invalid_options.rb	/^    class InvalidOptions < ClientError$/;"	c	class:BitBucket.Error	inherits:ClientError
Invitations	lib/bitbucket_rest_api/invitations.rb	/^  class Invitations < API$/;"	c	class:BitBucket	inherits:API
Issues	lib/bitbucket_rest_api/issues.rb	/^  class Issues < API$/;"	c	class:BitBucket	inherits:API
Jsonize	lib/bitbucket_rest_api/request/jsonize.rb	/^  class Request::Jsonize < Faraday::Middleware$/;"	c	class:BitBucket.Request	inherits:Faraday.Middleware
Jsonize	lib/bitbucket_rest_api/response/jsonize.rb	/^  class Response::Jsonize < Response$/;"	c	class:BitBucket.Response	inherits:Response
KEY_VALUE_SEP	lib/bitbucket_rest_api/utils/url.rb	/^      KEY_VALUE_SEP = '='.freeze$/;"	C	class:BitBucket.Utils.Url
Keys	lib/bitbucket_rest_api/repos/keys.rb	/^  class Repos::Keys < API$/;"	c	class:BitBucket.Repos	inherits:API
LOCATION	lib/bitbucket_rest_api/constants.rb	/^    LOCATION = 'Location'.freeze$/;"	C	class:BitBucket.Constants
MAJOR	lib/bitbucket_rest_api/version.rb	/^    MAJOR = 0$/;"	C	class:BitBucket.VERSION
META_FIRST	lib/bitbucket_rest_api/constants.rb	/^    META_FIRST = "first".freeze$/;"	C	class:BitBucket.Constants
META_LAST	lib/bitbucket_rest_api/constants.rb	/^    META_LAST = "last".freeze$/;"	C	class:BitBucket.Constants
META_NEXT	lib/bitbucket_rest_api/constants.rb	/^    META_NEXT = "next".freeze$/;"	C	class:BitBucket.Constants
META_PREV	lib/bitbucket_rest_api/constants.rb	/^    META_PREV = "prev".freeze$/;"	C	class:BitBucket.Constants
META_REL	lib/bitbucket_rest_api/constants.rb	/^    META_REL = "rel".freeze$/;"	C	class:BitBucket.Constants
METHODS	lib/bitbucket_rest_api/request.rb	/^    METHODS = [:get, :post, :put, :delete, :patch]$/;"	C	class:BitBucket.Request
METHODS_WITH_BODIES	lib/bitbucket_rest_api/request.rb	/^    METHODS_WITH_BODIES = [ :post, :put, :patch ]$/;"	C	class:BitBucket.Request
MIME_TYPE	lib/bitbucket_rest_api/request/jsonize.rb	/^    MIME_TYPE    = 'application\/json'.freeze$/;"	C	class:BitBucket.Request.Jsonize
MINOR	lib/bitbucket_rest_api/version.rb	/^    MINOR = 1$/;"	C	class:BitBucket.VERSION
Mashify	lib/bitbucket_rest_api/response/mashify.rb	/^  class Response::Mashify < Response$/;"	c	class:BitBucket.Response	inherits:Response
Milestones	lib/bitbucket_rest_api/issues/milestones.rb	/^  class Issues::Milestones < API$/;"	c	class:BitBucket.Issues	inherits:API
Normalizer	lib/bitbucket_rest_api/normalizer.rb	/^  module Normalizer$/;"	m	class:BitBucket
NotFound	lib/bitbucket_rest_api/error/not_found.rb	/^    class NotFound < ServiceError$/;"	c	class:BitBucket.Error	inherits:ServiceError
OAuth	lib/bitbucket_rest_api/request/oauth.rb	/^    class OAuth < Faraday::Middleware$/;"	c	class:BitBucket.Request	inherits:Faraday.Middleware
OrderedHash	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^      class OrderedHash < ::Hash$/;"	c	class:BitBucket.CoreExt	inherits:Hash
OrderedHash	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^      class OrderedHash < ::Hash; end$/;"	c	class:BitBucket.CoreExt	inherits:Hash
PARAM_PAGE	lib/bitbucket_rest_api/constants.rb	/^    PARAM_PAGE = "page".freeze$/;"	C	class:BitBucket.Constants
PARAM_PER_PAGE	lib/bitbucket_rest_api/constants.rb	/^    PARAM_PER_PAGE = "per_page".freeze$/;"	C	class:BitBucket.Constants
PARAM_START_PAGE	lib/bitbucket_rest_api/constants.rb	/^    PARAM_START_PAGE = "start_page".freeze$/;"	C	class:BitBucket.Constants
PATCH	lib/bitbucket_rest_api/version.rb	/^    PATCH = 7$/;"	C	class:BitBucket.VERSION
ParameterFilter	lib/bitbucket_rest_api/parameter_filter.rb	/^  module ParameterFilter$/;"	m	class:BitBucket
Presence	lib/bitbucket_rest_api/validations/presence.rb	/^    module Presence$/;"	m	class:BitBucket.Validations
PullRequest	lib/bitbucket_rest_api/repos/pull_request.rb	/^  class Repos::PullRequest < API$/;"	c	class:BitBucket.Repos	inherits:API
QUERY_STR_SEP	lib/bitbucket_rest_api/constants.rb	/^    QUERY_STR_SEP = '?'.freeze$/;"	C	class:BitBucket.Constants
RATELIMIT_LIMIT	lib/bitbucket_rest_api/constants.rb	/^    RATELIMIT_LIMIT = 'X-RateLimit-Limit'.freeze$/;"	C	class:BitBucket.Constants
RATELIMIT_REMAINING	lib/bitbucket_rest_api/constants.rb	/^    RATELIMIT_REMAINING = 'X-RateLimit-Remaining'.freeze$/;"	C	class:BitBucket.Constants
REQUIRED_COMMENT_PARAMS	lib/bitbucket_rest_api/repos/changesets.rb	/^    REQUIRED_COMMENT_PARAMS = %w[$/;"	C	class:BitBucket.Repos.Changesets
REQUIRED_COMMENT_PARAMS	lib/bitbucket_rest_api/repos/sources.rb	/^    REQUIRED_COMMENT_PARAMS = %w[$/;"	C	class:BitBucket.Repos.Sources
REQUIRED_KEY_PARAM_NAMES	lib/bitbucket_rest_api/repos/download.rb	/^     REQUIRED_KEY_PARAM_NAMES = %w[ commit_hash ].freeze$/;"	C	class:BitBucket.Repos.Download
REQUIRED_KEY_PARAM_NAMES	lib/bitbucket_rest_api/repos/forks.rb	/^    REQUIRED_KEY_PARAM_NAMES = %w[ name ].freeze$/;"	C	class:BitBucket.Repos.Forks
REQUIRED_KEY_PARAM_NAMES	lib/bitbucket_rest_api/repos/services.rb	/^    REQUIRED_KEY_PARAM_NAMES = %w[ type ].freeze$/;"	C	class:BitBucket.Repos.Services
RaiseError	lib/bitbucket_rest_api/response/raise_error.rb	/^  class Response::RaiseError < Faraday::Response::Middleware$/;"	c	class:BitBucket.Response	inherits:Faraday.Response.Middleware
Repos	lib/bitbucket_rest_api/repos.rb	/^  class Repos < API$/;"	c	class:BitBucket	inherits:API
Request	lib/bitbucket_rest_api/request.rb	/^  module Request$/;"	m	class:BitBucket
Request	lib/bitbucket_rest_api/request/basic_auth.rb	/^  module Request$/;"	m	class:BitBucket
Request	lib/bitbucket_rest_api/request/oauth.rb	/^  module Request$/;"	m	class:BitBucket
Required	lib/bitbucket_rest_api/validations/required.rb	/^    module Required$/;"	m	class:BitBucket.Validations
RequiredParams	lib/bitbucket_rest_api/error/required_params.rb	/^    class RequiredParams < ClientError$/;"	c	class:BitBucket.Error	inherits:ClientError
Response	lib/bitbucket_rest_api/response.rb	/^  class Response < Faraday::Response::Middleware$/;"	c	class:BitBucket	inherits:Faraday.Response.Middleware
Result	lib/bitbucket_rest_api/result.rb	/^  module Result$/;"	m	class:BitBucket
SERVER	lib/bitbucket_rest_api/constants.rb	/^    SERVER = 'Server'.freeze$/;"	C	class:BitBucket.Constants
STRING	lib/bitbucket_rest_api/version.rb	/^    STRING = [MAJOR, MINOR, PATCH].compact.join('.')$/;"	C	class:BitBucket.VERSION
ServiceError	lib/bitbucket_rest_api/error/service_error.rb	/^    class ServiceError < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
ServiceUnavailable	lib/bitbucket_rest_api/error/service_unavailable.rb	/^    class ServiceUnavailable < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
Services	lib/bitbucket_rest_api/repos/services.rb	/^  class Repos::Services < API$/;"	c	class:BitBucket.Repos	inherits:API
Sources	lib/bitbucket_rest_api/repos/sources.rb	/^  class Repos::Sources < API$/;"	c	class:BitBucket.Repos	inherits:API
TOKEN_REQUIRED	lib/bitbucket_rest_api/validations/token.rb	/^      TOKEN_REQUIRED = [$/;"	C	class:BitBucket.Validations.Token
TOKEN_REQUIRED_REGEXP	lib/bitbucket_rest_api/validations/token.rb	/^      TOKEN_REQUIRED_REGEXP = [$/;"	C	class:BitBucket.Validations.Token
Token	lib/bitbucket_rest_api/validations/token.rb	/^    module Token$/;"	m	class:BitBucket.Validations
USER_AGENT	lib/bitbucket_rest_api/constants.rb	/^    USER_AGENT = 'User-Agent'.freeze$/;"	C	class:BitBucket.Constants
Unauthorized	lib/bitbucket_rest_api/error/unauthorized.rb	/^    class Unauthorized < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
UnknownValue	lib/bitbucket_rest_api/error/unknown_value.rb	/^    class UnknownValue < ClientError$/;"	c	class:BitBucket.Error	inherits:ClientError
UnprocessableEntity	lib/bitbucket_rest_api/error/unprocessable_entity.rb	/^    class UnprocessableEntity < BitBucketError$/;"	c	class:BitBucket.Error	inherits:BitBucketError
Url	lib/bitbucket_rest_api/utils/url.rb	/^    module Url$/;"	m	class:BitBucket.Utils
User	lib/bitbucket_rest_api/user.rb	/^  class User < API$/;"	c	class:BitBucket	inherits:API
Users	lib/bitbucket_rest_api/users.rb	/^  class Users < API$/;"	c	class:BitBucket	inherits:API
Utils	lib/bitbucket_rest_api/utils/url.rb	/^  module Utils$/;"	m	class:BitBucket
VALID_API_KEYS	lib/bitbucket_rest_api/validations.rb	/^    VALID_API_KEYS = [$/;"	C	class:BitBucket.Validations
VALID_COMPONENT_INPUTS	lib/bitbucket_rest_api/issues/components.rb	/^    VALID_COMPONENT_INPUTS = %w[ name ].freeze$/;"	C	class:BitBucket.Issues.Components
VALID_ISSUE_COMMENT_PARAM_NAME	lib/bitbucket_rest_api/issues/comments.rb	/^    VALID_ISSUE_COMMENT_PARAM_NAME = %w[$/;"	C	class:BitBucket.Issues.Comments
VALID_ISSUE_PARAM_NAMES	lib/bitbucket_rest_api/issues.rb	/^    VALID_ISSUE_PARAM_NAMES = %w[$/;"	C	class:BitBucket.Issues
VALID_ISSUE_PARAM_VALUES	lib/bitbucket_rest_api/issues.rb	/^    VALID_ISSUE_PARAM_VALUES = {$/;"	C	class:BitBucket.Issues
VALID_KEY_PARAM_NAMES	lib/bitbucket_rest_api/repos/keys.rb	/^    VALID_KEY_PARAM_NAMES = %w[ label key ].freeze$/;"	C	class:BitBucket.Repos.Keys
VALID_MILESTONE_INPUTS	lib/bitbucket_rest_api/issues/milestones.rb	/^    VALID_MILESTONE_INPUTS = %w[$/;"	C	class:BitBucket.Issues.Milestones
VALID_OPTIONS_KEYS	lib/bitbucket_rest_api/configuration.rb	/^    VALID_OPTIONS_KEYS         = [$/;"	C	class:BitBucket.Configuration
VALID_REPO_OPTIONS	lib/bitbucket_rest_api/repos.rb	/^    VALID_REPO_OPTIONS = %w[$/;"	C	class:BitBucket.Repos
VALID_REPO_OPTIONS	lib/bitbucket_rest_api/repos/forks.rb	/^    VALID_REPO_OPTIONS = %w[$/;"	C	class:BitBucket.Repos.Forks
VERSION	lib/bitbucket_rest_api/version.rb	/^  module VERSION$/;"	m	class:BitBucket
Validations	lib/bitbucket_rest_api/error/validations.rb	/^    class Validations < ClientError$/;"	c	class:BitBucket.Error	inherits:ClientError
Validations	lib/bitbucket_rest_api/validations.rb	/^  module Validations$/;"	m	class:BitBucket
Validations	lib/bitbucket_rest_api/validations/format.rb	/^  module Validations$/;"	m	class:BitBucket
Validations	lib/bitbucket_rest_api/validations/presence.rb	/^  module Validations$/;"	m	class:BitBucket
Validations	lib/bitbucket_rest_api/validations/required.rb	/^  module Validations$/;"	m	class:BitBucket
Validations	lib/bitbucket_rest_api/validations/token.rb	/^  module Validations$/;"	m	class:BitBucket
Xmlize	lib/bitbucket_rest_api/response/xmlize.rb	/^  class Response::Xmlize < Response$/;"	c	class:BitBucket.Response	inherits:Response
[]	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^          def [](*args)$/;"	F	class:BitBucket.CoreExt.OrderedHash
[]=	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def []=(key, value)$/;"	f	class:BitBucket.CoreExt.OrderedHash
__class__	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def __class__$/;"	f	class:BitBucket.CoreExt.OrderedHash
_extract_mime_type	lib/bitbucket_rest_api/request.rb	/^    def _extract_mime_type(params, options) # :nodoc:$/;"	f	class:BitBucket.Request
_hash_traverse	lib/bitbucket_rest_api/api.rb	/^    def _hash_traverse(hash, &block)$/;"	f	class:BitBucket.API
_merge_mime_type	lib/bitbucket_rest_api/api.rb	/^    def _merge_mime_type(resource, params) # :nodoc:$/;"	f	class:BitBucket.API
_merge_user_into_params!	lib/bitbucket_rest_api/api.rb	/^    def _merge_user_into_params!(params)  #  :nodoc:$/;"	f	class:BitBucket.API
_merge_user_repo_into_params!	lib/bitbucket_rest_api/api.rb	/^    def _merge_user_repo_into_params!(params)   #  :nodoc:$/;"	f	class:BitBucket.API
_update_user_repo_params	lib/bitbucket_rest_api/api.rb	/^    def _update_user_repo_params(user_name, repo_name=nil) # :nodoc:$/;"	f	class:BitBucket.API
_validate_presence_of	lib/bitbucket_rest_api/validations/presence.rb	/^      def _validate_presence_of(*params)$/;"	f	class:BitBucket.Validations.Presence
_validate_user_repo_params	lib/bitbucket_rest_api/validations/presence.rb	/^      def _validate_user_repo_params(user_name, repo_name)$/;"	f	class:BitBucket.Validations.Presence
_verify_client	lib/bitbucket_rest_api/authorization.rb	/^    def _verify_client # :nodoc:$/;"	f	class:BitBucket.Authorization
account	lib/bitbucket_rest_api/users.rb	/^    def account$/;"	f	class:BitBucket.Users
all	lib/bitbucket_rest_api/issues/comments.rb	/^    alias :all :list$/;"	a	class:BitBucket.Issues.Comments
all	lib/bitbucket_rest_api/issues/components.rb	/^    alias :all :list$/;"	a	class:BitBucket.Issues.Components
all	lib/bitbucket_rest_api/issues/milestones.rb	/^    alias :all :list$/;"	a	class:BitBucket.Issues.Milestones
all	lib/bitbucket_rest_api/repos.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos
all	lib/bitbucket_rest_api/repos/changesets.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos.Changesets
all	lib/bitbucket_rest_api/repos/forks.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos.Forks
all	lib/bitbucket_rest_api/repos/keys.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos.Keys
all	lib/bitbucket_rest_api/repos/pull_request.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos.PullRequest
all	lib/bitbucket_rest_api/repos/services.rb	/^    alias :all :list$/;"	a	class:BitBucket.Repos.Services
api_client	lib/bitbucket_rest_api.rb	/^    attr_accessor :api_client$/;"	F	class:BitBucket
api_client=	lib/bitbucket_rest_api.rb	/^    attr_accessor :api_client$/;"	F	class:BitBucket
api_methods_in	lib/bitbucket_rest_api/api/actions.rb	/^    def api_methods_in(klass)$/;"	f	class:BitBucket.API
append_arguments	lib/bitbucket_rest_api/api/actions.rb	/^    def append_arguments(method)$/;"	f	class:BitBucket.API
assert_required_keys	lib/bitbucket_rest_api/validations/required.rb	/^      def assert_required_keys(required, provided)$/;"	f	class:BitBucket.Validations.Required
assert_valid_values	lib/bitbucket_rest_api/validations/format.rb	/^      def assert_valid_values(permitted, params)$/;"	f	class:BitBucket.Validations.Format
authenticated?	lib/bitbucket_rest_api/authorization.rb	/^    def authenticated?$/;"	f	class:BitBucket.Authorization
authentication	lib/bitbucket_rest_api/authorization.rb	/^    def authentication$/;"	f	class:BitBucket.Authorization
authorizations	lib/bitbucket_rest_api/client.rb	/^    alias :authorizations :oauth$/;"	a	class:BitBucket.Client
autoload_all	lib/bitbucket_rest_api.rb	/^    def autoload_all(prefix, options)$/;"	f	class:BitBucket.AutoloadHelper
basic_authed?	lib/bitbucket_rest_api/authorization.rb	/^    def basic_authed?$/;"	f	class:BitBucket.Authorization
body	lib/bitbucket_rest_api/result.rb	/^    def body$/;"	f	class:BitBucket.Result
branches	lib/bitbucket_rest_api/repos.rb	/^    def branches(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos
build_query	lib/bitbucket_rest_api/utils/url.rb	/^      def build_query(params)$/;"	f	class:BitBucket.Utils.Url
cache_control	lib/bitbucket_rest_api/result.rb	/^    def cache_control$/;"	f	class:BitBucket.Result
caching?	lib/bitbucket_rest_api/connection.rb	/^    def caching?$/;"	f	class:BitBucket.Connection
call	lib/bitbucket_rest_api/request/basic_auth.rb	/^      def call(env)$/;"	f	class:BitBucket.Request.BasicAuth
call	lib/bitbucket_rest_api/request/jsonize.rb	/^    def call(env)$/;"	f	class:BitBucket.Request.Jsonize
call	lib/bitbucket_rest_api/request/oauth.rb	/^      def call(env)$/;"	f	class:BitBucket.Request.OAuth
changesets	lib/bitbucket_rest_api/repos.rb	/^    def changesets$/;"	f	class:BitBucket.Repos
class	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def class$/;"	f	class:BitBucket.CoreExt.OrderedHash
clear	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def clear$/;"	f	class:BitBucket.CoreExt.OrderedHash
clear_cache	lib/bitbucket_rest_api/connection.rb	/^    def clear_cache$/;"	f	class:BitBucket.Connection
comments	lib/bitbucket_rest_api/issues.rb	/^    def comments$/;"	f	class:BitBucket.Issues
commits	lib/bitbucket_rest_api/repos.rb	/^    def commits$/;"	f	class:BitBucket.Repos
components	lib/bitbucket_rest_api/issues.rb	/^    def components$/;"	f	class:BitBucket.Issues
configure	lib/bitbucket_rest_api/configuration.rb	/^    def configure$/;"	f	class:BitBucket.Configuration
connection	lib/bitbucket_rest_api/connection.rb	/^    def connection(options = {})$/;"	f	class:BitBucket.Connection
content_length	lib/bitbucket_rest_api/result.rb	/^    def content_length$/;"	f	class:BitBucket.Result
content_type	lib/bitbucket_rest_api/result.rb	/^    def content_type$/;"	f	class:BitBucket.Result
convert_to_constant	lib/bitbucket_rest_api/api_factory.rb	/^    def self.convert_to_constant(classes)$/;"	F	class:BitBucket.ApiFactory
create	lib/bitbucket_rest_api/issues.rb	/^    def create(user_name, repo_name, params={ })$/;"	f	class:BitBucket.Issues
create	lib/bitbucket_rest_api/issues/comments.rb	/^    def create(user_name, repo_name, issue_id, params={})$/;"	f	class:BitBucket.Issues.Comments
create	lib/bitbucket_rest_api/issues/components.rb	/^    def create(user_name, repo_name, params={})$/;"	f	class:BitBucket.Issues.Components
create	lib/bitbucket_rest_api/issues/milestones.rb	/^    def create(user_name, repo_name, params={})$/;"	f	class:BitBucket.Issues.Milestones
create	lib/bitbucket_rest_api/repos.rb	/^    def create(*args)$/;"	f	class:BitBucket.Repos
create	lib/bitbucket_rest_api/repos/forks.rb	/^    def create(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Forks
create	lib/bitbucket_rest_api/repos/keys.rb	/^    def create(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Keys
create	lib/bitbucket_rest_api/repos/services.rb	/^    def create(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Services
create_instance	lib/bitbucket_rest_api/api_factory.rb	/^    def self.create_instance(klass, options)$/;"	F	class:BitBucket.ApiFactory
dashboard	lib/bitbucket_rest_api/user.rb	/^    def dashboard$/;"	f	class:BitBucket.User
date	lib/bitbucket_rest_api/result.rb	/^    def date$/;"	f	class:BitBucket.Result
default_middleware	lib/bitbucket_rest_api/connection.rb	/^    def default_middleware(options={})$/;"	f	class:BitBucket.Connection
default_options	lib/bitbucket_rest_api/connection.rb	/^    def default_options(options={})$/;"	f	class:BitBucket.Connection
define_parser	lib/bitbucket_rest_api/response.rb	/^    def self.define_parser(&block)$/;"	F	class:BitBucket.Response
delete	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def delete(key)$/;"	f	class:BitBucket.CoreExt.OrderedHash
delete	lib/bitbucket_rest_api/issues.rb	/^    def delete(user_name, repo_name, issue_id, params={ })$/;"	f	class:BitBucket.Issues
delete	lib/bitbucket_rest_api/issues/comments.rb	/^    def delete(user_name, repo_name, comment_id, params={})$/;"	f	class:BitBucket.Issues.Comments
delete	lib/bitbucket_rest_api/issues/components.rb	/^    def delete(user_name, repo_name, component_id, params={})$/;"	f	class:BitBucket.Issues.Components
delete	lib/bitbucket_rest_api/issues/milestones.rb	/^    def delete(user_name, repo_name, milestone_id, params={})$/;"	f	class:BitBucket.Issues.Milestones
delete	lib/bitbucket_rest_api/repos.rb	/^    def delete(user_name, repo_name)$/;"	f	class:BitBucket.Repos
delete	lib/bitbucket_rest_api/repos/keys.rb	/^    def delete(user_name, repo_name, key_id, params={})$/;"	f	class:BitBucket.Repos.Keys
delete	lib/bitbucket_rest_api/repos/services.rb	/^    def delete(user_name, repo_name, service_id, params={})$/;"	f	class:BitBucket.Repos.Services
delete_if	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def delete_if$/;"	f	class:BitBucket.CoreExt.OrderedHash
delete_key	lib/bitbucket_rest_api/users/account.rb	/^    def delete_key(accountname, key_id)$/;"	f	class:BitBucket.Users.Account
delete_request	lib/bitbucket_rest_api/request.rb	/^    def delete_request(path, params={}, options={})$/;"	f	class:BitBucket.Request
deprecate	lib/bitbucket_rest_api/deprecation.rb	/^    def deprecate(method, alternate_method=nil)$/;"	F	class:BitBucket
deprecation_tracker	lib/bitbucket_rest_api/deprecation.rb	/^    def deprecation_tracker$/;"	F	class:BitBucket
deprecation_tracker=	lib/bitbucket_rest_api/deprecation.rb	/^    attr_writer :deprecation_tracker$/;"	F	class:BitBucket
download	lib/bitbucket_rest_api/repos.rb	/^    def download$/;"	f	class:BitBucket.Repos
each	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def each$/;"	f	class:BitBucket.CoreExt.OrderedHash
each_key	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def each_key$/;"	f	class:BitBucket.CoreExt.OrderedHash
each_page	lib/bitbucket_rest_api/result.rb	/^    def each_page$/;"	f	class:BitBucket.Result
each_pair	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        alias :each_pair :each$/;"	a	class:BitBucket.CoreExt.OrderedHash
each_value	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def each_value$/;"	f	class:BitBucket.CoreExt.OrderedHash
edit	lib/bitbucket_rest_api/issues.rb	/^    def edit(user_name, repo_name, issue_id, params={ })$/;"	f	class:BitBucket.Issues
edit	lib/bitbucket_rest_api/issues/comments.rb	/^    def edit(user_name, repo_name, comment_id, params={})$/;"	f	class:BitBucket.Issues.Comments
edit	lib/bitbucket_rest_api/issues/components.rb	/^    alias :edit :update$/;"	a	class:BitBucket.Issues.Components
edit	lib/bitbucket_rest_api/repos.rb	/^    def edit(user_name, repo_name, params={ })$/;"	f	class:BitBucket.Repos
edit	lib/bitbucket_rest_api/repos/keys.rb	/^    def edit(user_name, repo_name, key_id, params={})$/;"	f	class:BitBucket.Repos.Keys
edit	lib/bitbucket_rest_api/repos/services.rb	/^    def edit(user_name, repo_name, service_id, params={})$/;"	f	class:BitBucket.Repos.Services
emails	lib/bitbucket_rest_api/users/account.rb	/^    def emails(accountname)$/;"	f	class:BitBucket.Users.Account
encode_body	lib/bitbucket_rest_api/request/jsonize.rb	/^    def encode_body(env)$/;"	f	class:BitBucket.Request.Jsonize
escape	lib/bitbucket_rest_api/utils/url.rb	/^      def escape(s) CGI.escape s.to_s end$/;"	f	class:BitBucket.Utils.Url
etag	lib/bitbucket_rest_api/result.rb	/^    def etag$/;"	f	class:BitBucket.Result
events	lib/bitbucket_rest_api/client.rb	/^    def events(options = {})$/;"	f	class:BitBucket.Client
events	lib/bitbucket_rest_api/users/account.rb	/^    def events(accountname)$/;"	f	class:BitBucket.Users.Account
extended	lib/bitbucket_rest_api/configuration.rb	/^    def self.extended(base)$/;"	F	class:BitBucket.Configuration
extract_data_from_params	lib/bitbucket_rest_api/request.rb	/^    def extract_data_from_params(params) # :nodoc:$/;"	f	class:BitBucket.Request
extract_options!	lib/bitbucket_rest_api/core_ext/array.rb	/^  def extract_options!$/;"	f	class:Array
filter!	lib/bitbucket_rest_api/parameter_filter.rb	/^    def filter!(keys, params, options={:recursive => true})  # :nodoc:$/;"	f	class:BitBucket.ParameterFilter
find	lib/bitbucket_rest_api/issues.rb	/^    alias :find :get$/;"	a	class:BitBucket.Issues
find	lib/bitbucket_rest_api/issues/comments.rb	/^    alias :find :get$/;"	a	class:BitBucket.Issues.Comments
find	lib/bitbucket_rest_api/issues/components.rb	/^    alias :find :get$/;"	a	class:BitBucket.Issues.Components
find	lib/bitbucket_rest_api/issues/milestones.rb	/^    alias :find :get$/;"	a	class:BitBucket.Issues.Milestones
find	lib/bitbucket_rest_api/repos.rb	/^    alias :find :get$/;"	a	class:BitBucket.Repos
find	lib/bitbucket_rest_api/repos/changesets.rb	/^    alias :find :get$/;"	a	class:BitBucket.Repos.Changesets
find	lib/bitbucket_rest_api/repos/services.rb	/^    alias :find :get$/;"	a	class:BitBucket.Repos.Services
find	lib/bitbucket_rest_api/repos/sources.rb	/^    alias :find :get$/;"	a	class:BitBucket.Repos.Sources
first_page	lib/bitbucket_rest_api/result.rb	/^    def first_page$/;"	f	class:BitBucket.Result
followed	lib/bitbucket_rest_api/repos/following.rb	/^    def followed(*args)$/;"	f	class:BitBucket.Repos.Following
followers	lib/bitbucket_rest_api/repos/following.rb	/^    def followers(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Following
followers	lib/bitbucket_rest_api/users/account.rb	/^    def followers(accountname)$/;"	f	class:BitBucket.Users.Account
following	lib/bitbucket_rest_api/repos.rb	/^    def following$/;"	f	class:BitBucket.Repos
follows	lib/bitbucket_rest_api/user.rb	/^    def follows$/;"	f	class:BitBucket.User
forks	lib/bitbucket_rest_api/repos.rb	/^    def forks$/;"	f	class:BitBucket.Repos
generate_message	lib/bitbucket_rest_api/error/client_error.rb	/^      def generate_message(attributes)$/;"	f	class:BitBucket.Error.ClientError
generate_message	lib/bitbucket_rest_api/error/service_error.rb	/^      def generate_message(env)$/;"	f	class:BitBucket.Error.ServiceError
get	lib/bitbucket_rest_api/issues.rb	/^    def get(user_name, repo_name, issue_id, params={ })$/;"	f	class:BitBucket.Issues
get	lib/bitbucket_rest_api/issues/comments.rb	/^    def get(user_name, repo_name, comment_id, params={})$/;"	f	class:BitBucket.Issues.Comments
get	lib/bitbucket_rest_api/issues/components.rb	/^    def get(user_name, repo_name, component_id, params={})$/;"	f	class:BitBucket.Issues.Components
get	lib/bitbucket_rest_api/issues/milestones.rb	/^    def get(user_name, repo_name, milestone_id, params={})$/;"	f	class:BitBucket.Issues.Milestones
get	lib/bitbucket_rest_api/repos.rb	/^    def get(user_name, repo_name, params={ })$/;"	f	class:BitBucket.Repos
get	lib/bitbucket_rest_api/repos/changesets.rb	/^    def get(user_name, repo_name, sha, params={})$/;"	f	class:BitBucket.Repos.Changesets
get	lib/bitbucket_rest_api/repos/commits.rb	/^    def get(user_name, repo_name)$/;"	f	class:BitBucket.Repos.Commits
get	lib/bitbucket_rest_api/repos/download.rb	/^def get(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Download
get	lib/bitbucket_rest_api/repos/services.rb	/^    def get(user_name, repo_name, service_id, params={})$/;"	f	class:BitBucket.Repos.Services
get	lib/bitbucket_rest_api/repos/sources.rb	/^    def get(user_name, repo_name, sha, path, params={})$/;"	f	class:BitBucket.Repos.Sources
get_request	lib/bitbucket_rest_api/request.rb	/^    def get_request(path, params={}, options={})$/;"	f	class:BitBucket.Request
has_body?	lib/bitbucket_rest_api/request/jsonize.rb	/^    def has_body?(env)$/;"	f	class:BitBucket.Request.Jsonize
has_next_page?	lib/bitbucket_rest_api/result.rb	/^    def has_next_page?$/;"	f	class:BitBucket.Result
http_headers	lib/bitbucket_rest_api/error/service_error.rb	/^      attr_accessor :http_headers$/;"	f	class:BitBucket.Error.ServiceError
http_headers=	lib/bitbucket_rest_api/error/service_error.rb	/^      attr_accessor :http_headers$/;"	f	class:BitBucket.Error.ServiceError
inherited	lib/bitbucket_rest_api/api/actions.rb	/^    def self.inherited(klass)$/;"	F	class:BitBucket.API
initialize	lib/bitbucket_rest_api/api.rb	/^    def initialize(options={}, &block)$/;"	f	class:BitBucket.API
initialize	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def initialize(*args, &block)$/;"	f	class:BitBucket.CoreExt.OrderedHash
initialize	lib/bitbucket_rest_api/error.rb	/^      def initialize(message)$/;"	f	class:BitBucket.Error.BitBucketError
initialize	lib/bitbucket_rest_api/error/bad_request.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.BadRequest
initialize	lib/bitbucket_rest_api/error/client_error.rb	/^      def initialize(message)$/;"	f	class:BitBucket.Error.ClientError
initialize	lib/bitbucket_rest_api/error/forbidden.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.Forbidden
initialize	lib/bitbucket_rest_api/error/internal_server_error.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.InternalServerError
initialize	lib/bitbucket_rest_api/error/invalid_options.rb	/^      def initialize(invalid, valid)$/;"	f	class:BitBucket.Error.InvalidOptions
initialize	lib/bitbucket_rest_api/error/not_found.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.NotFound
initialize	lib/bitbucket_rest_api/error/required_params.rb	/^      def initialize(provided, required)$/;"	f	class:BitBucket.Error.RequiredParams
initialize	lib/bitbucket_rest_api/error/service_error.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.ServiceError
initialize	lib/bitbucket_rest_api/error/service_unavailable.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.ServiceUnavailable
initialize	lib/bitbucket_rest_api/error/unauthorized.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.Unauthorized
initialize	lib/bitbucket_rest_api/error/unknown_value.rb	/^      def initialize(key, value, permitted)$/;"	f	class:BitBucket.Error.UnknownValue
initialize	lib/bitbucket_rest_api/error/unprocessable_entity.rb	/^      def initialize(env)$/;"	f	class:BitBucket.Error.UnprocessableEntity
initialize	lib/bitbucket_rest_api/error/validations.rb	/^      def initialize(errors)$/;"	f	class:BitBucket.Error.Validations
initialize	lib/bitbucket_rest_api/issues.rb	/^    def initialize(options = { })$/;"	f	class:BitBucket.Issues
initialize	lib/bitbucket_rest_api/issues/comments.rb	/^    def initialize(options = {})$/;"	f	class:BitBucket.Issues.Comments
initialize	lib/bitbucket_rest_api/issues/components.rb	/^    def initialize(options = {})$/;"	f	class:BitBucket.Issues.Components
initialize	lib/bitbucket_rest_api/issues/milestones.rb	/^    def initialize(options = {})$/;"	f	class:BitBucket.Issues.Milestones
initialize	lib/bitbucket_rest_api/repos.rb	/^    def initialize(options = { })$/;"	f	class:BitBucket.Repos
initialize	lib/bitbucket_rest_api/request/basic_auth.rb	/^      def initialize(app, *args)$/;"	f	class:BitBucket.Request.BasicAuth
initialize	lib/bitbucket_rest_api/request/oauth.rb	/^      def initialize(app, *args)$/;"	f	class:BitBucket.Request.OAuth
initialize	lib/bitbucket_rest_api/user.rb	/^    def initialize(options = { })$/;"	f	class:BitBucket.User
initialize	lib/bitbucket_rest_api/users.rb	/^    def initialize(options = { })$/;"	f	class:BitBucket.Users
invitations	lib/bitbucket_rest_api/client.rb	/^    def invitations(options = {})$/;"	f	class:BitBucket.Client
invite	lib/bitbucket_rest_api/invitations.rb	/^    def invite(user_name, repo_name, emailaddress, perm)$/;"	f	class:BitBucket.Invitations
issues	lib/bitbucket_rest_api/client.rb	/^    def issues(options = {})$/;"	f	class:BitBucket.Client
keys	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def keys$/;"	f	class:BitBucket.CoreExt.OrderedHash
keys	lib/bitbucket_rest_api/repos.rb	/^    def keys$/;"	f	class:BitBucket.Repos
keys	lib/bitbucket_rest_api/users/account.rb	/^    def keys(accountname)$/;"	f	class:BitBucket.Users.Account
last_page	lib/bitbucket_rest_api/result.rb	/^    def last_page$/;"	f	class:BitBucket.Result
links	lib/bitbucket_rest_api/result.rb	/^    def links$/;"	f	class:BitBucket.Result
list	lib/bitbucket_rest_api/issues/comments.rb	/^    def list(user_name, repo_name, issue_id, params={})$/;"	f	class:BitBucket.Issues.Comments
list	lib/bitbucket_rest_api/issues/components.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Issues.Components
list	lib/bitbucket_rest_api/issues/milestones.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Issues.Milestones
list	lib/bitbucket_rest_api/repos.rb	/^    def list(*args)$/;"	f	class:BitBucket.Repos
list	lib/bitbucket_rest_api/repos/changesets.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Changesets
list	lib/bitbucket_rest_api/repos/forks.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Forks
list	lib/bitbucket_rest_api/repos/keys.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Keys
list	lib/bitbucket_rest_api/repos/pull_request.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.PullRequest
list	lib/bitbucket_rest_api/repos/services.rb	/^    def list(user_name, repo_name, params={})$/;"	f	class:BitBucket.Repos.Services
list_branches	lib/bitbucket_rest_api/repos.rb	/^    alias :list_branches :branches$/;"	a	class:BitBucket.Repos
list_repo	lib/bitbucket_rest_api/issues.rb	/^    def list_repo(user_name, repo_name, params={ })$/;"	f	class:BitBucket.Issues
list_repository	lib/bitbucket_rest_api/issues.rb	/^    alias :list_repository :list_repo$/;"	a	class:BitBucket.Issues
list_tags	lib/bitbucket_rest_api/repos.rb	/^    alias :list_tags :tags$/;"	a	class:BitBucket.Repos
loaded?	lib/bitbucket_rest_api/result.rb	/^    def loaded?$/;"	f	class:BitBucket.Result
location	lib/bitbucket_rest_api/result.rb	/^    def location$/;"	f	class:BitBucket.Result
lookup_constant	lib/bitbucket_rest_api.rb	/^    def lookup_constant(const_name)$/;"	f	class:BitBucket.AutoloadHelper
method_missing	lib/bitbucket_rest_api.rb	/^    def method_missing(method, *args, &block)$/;"	F	class:BitBucket
method_missing	lib/bitbucket_rest_api/api.rb	/^    def method_missing(method, *args, &block) # :nodoc:$/;"	f	class:BitBucket.API
milestones	lib/bitbucket_rest_api/issues.rb	/^    def milestones$/;"	f	class:BitBucket.Issues
new	lib/bitbucket_rest_api.rb	/^    def new(options = { }, &block)$/;"	F	class:BitBucket
new	lib/bitbucket_rest_api/api_factory.rb	/^    def self.new(klass, options={})$/;"	F	class:BitBucket.ApiFactory
new_key	lib/bitbucket_rest_api/users/account.rb	/^    def new_key(accountname, params)$/;"	f	class:BitBucket.Users.Account
next_page	lib/bitbucket_rest_api/result.rb	/^    def next_page$/;"	f	class:BitBucket.Result
normalize!	lib/bitbucket_rest_api/normalizer.rb	/^    def normalize!(params)$/;"	f	class:BitBucket.Normalizer
oauth	lib/bitbucket_rest_api/client.rb	/^    def oauth(options = {})$/;"	f	class:BitBucket.Client
on_complete	lib/bitbucket_rest_api/response/helpers.rb	/^    def on_complete(env)$/;"	f	class:BitBucket.Response.Helpers
on_complete	lib/bitbucket_rest_api/response/raise_error.rb	/^    def on_complete(env)$/;"	f	class:BitBucket.Response.RaiseError
options	lib/bitbucket_rest_api/configuration.rb	/^    def options$/;"	f	class:BitBucket.Configuration
order	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        attr_accessor :order$/;"	f	class:BitBucket.CoreExt.OrderedHash
order=	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        attr_accessor :order$/;"	f	class:BitBucket.CoreExt.OrderedHash
overview	lib/bitbucket_rest_api/user.rb	/^    def overview$/;"	f	class:BitBucket.User
page	lib/bitbucket_rest_api/result.rb	/^    def page(page_number)$/;"	f	class:BitBucket.Result
page_iterator	lib/bitbucket_rest_api/result.rb	/^    def page_iterator # :nodoc:$/;"	f	class:BitBucket.Result
parse	lib/bitbucket_rest_api/response/jsonize.rb	/^    def parse(body)$/;"	f	class:BitBucket.Response.Jsonize
parse	lib/bitbucket_rest_api/response/mashify.rb	/^    def parse(body)$/;"	f	class:BitBucket.Response.Mashify
parse	lib/bitbucket_rest_api/response/xmlize.rb	/^    def parse(body)$/;"	f	class:BitBucket.Response.Xmlize
parse_query	lib/bitbucket_rest_api/utils/url.rb	/^      def parse_query(query_string)$/;"	f	class:BitBucket.Utils.Url
parse_query_for_param	lib/bitbucket_rest_api/utils/url.rb	/^      def parse_query_for_param(query_string, name)$/;"	f	class:BitBucket.Utils.Url
parse_response?	lib/bitbucket_rest_api/response.rb	/^    def parse_response?(env)$/;"	f	class:BitBucket.Response
parser	lib/bitbucket_rest_api/response.rb	/^      attr_accessor :parser$/;"	F	class:BitBucket.Response
parser=	lib/bitbucket_rest_api/response.rb	/^      attr_accessor :parser$/;"	F	class:BitBucket.Response
participants	lib/bitbucket_rest_api/repos/pull_request.rb	/^    def participants(user_name, repo_name, pull_request_id, params={})$/;"	f	class:BitBucket.Repos.PullRequest
patch_request	lib/bitbucket_rest_api/request.rb	/^    def patch_request(path, params={}, options={})$/;"	f	class:BitBucket.Request
plan	lib/bitbucket_rest_api/users/account.rb	/^    def plan(accountname)$/;"	f	class:BitBucket.Users.Account
post_request	lib/bitbucket_rest_api/request.rb	/^    def post_request(path, params={}, options={})$/;"	f	class:BitBucket.Request
prev_page	lib/bitbucket_rest_api/result.rb	/^    def prev_page$/;"	f	class:BitBucket.Result
previous_page	lib/bitbucket_rest_api/result.rb	/^    alias :previous_page :prev_page$/;"	a	class:BitBucket.Result
privileges	lib/bitbucket_rest_api/user.rb	/^    def privileges$/;"	f	class:BitBucket.User
problem	lib/bitbucket_rest_api/error/client_error.rb	/^      attr_reader :problem, :summary, :resolution$/;"	f	class:BitBucket.Error.ClientError
process_basic_auth	lib/bitbucket_rest_api/api.rb	/^    def process_basic_auth(auth)$/;"	f	class:BitBucket.API
profile	lib/bitbucket_rest_api/user.rb	/^    def profile$/;"	f	class:BitBucket.User
profile	lib/bitbucket_rest_api/users/account.rb	/^    def profile(accountname)$/;"	f	class:BitBucket.Users.Account
pull_request	lib/bitbucket_rest_api/repos.rb	/^    def pull_request$/;"	f	class:BitBucket.Repos
pull_requests	lib/bitbucket_rest_api/client.rb	/^    def pull_requests(options = {})$/;"	f	class:BitBucket.Client
put_request	lib/bitbucket_rest_api/request.rb	/^    def put_request(path, params={}, options={})$/;"	f	class:BitBucket.Request
query_params	lib/bitbucket_rest_api/request/oauth.rb	/^      def query_params(url)$/;"	f	class:BitBucket.Request.OAuth
ratelimit_limit	lib/bitbucket_rest_api/result.rb	/^    def ratelimit_limit$/;"	f	class:BitBucket.Result
ratelimit_remaining	lib/bitbucket_rest_api/result.rb	/^    def ratelimit_remaining$/;"	f	class:BitBucket.Result
register_constant	lib/bitbucket_rest_api.rb	/^    def register_constant(options)$/;"	f	class:BitBucket.AutoloadHelper
replace	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def replace(hsh2)$/;"	f	class:BitBucket.CoreExt.OrderedHash
repo_tags	lib/bitbucket_rest_api/repos.rb	/^    alias :repo_tags :tags$/;"	a	class:BitBucket.Repos
repos	lib/bitbucket_rest_api/client.rb	/^    def repos(options = {})$/;"	f	class:BitBucket.Client
repos	lib/bitbucket_rest_api/user.rb	/^    alias :repos :repositories$/;"	a	class:BitBucket.User
repositories	lib/bitbucket_rest_api/client.rb	/^    alias :repositories :repos$/;"	a	class:BitBucket.Client
repositories	lib/bitbucket_rest_api/user.rb	/^    def repositories$/;"	f	class:BitBucket.User
repository_tags	lib/bitbucket_rest_api/repos.rb	/^    alias :repository_tags :tags$/;"	a	class:BitBucket.Repos
request	lib/bitbucket_rest_api/request.rb	/^    def request(method, path, params, options)$/;"	f	class:BitBucket.Request
request_type	lib/bitbucket_rest_api/request/jsonize.rb	/^    def request_type(env)$/;"	f	class:BitBucket.Request.Jsonize
request_with_body?	lib/bitbucket_rest_api/request/jsonize.rb	/^    def request_with_body?(env)$/;"	f	class:BitBucket.Request.Jsonize
reset	lib/bitbucket_rest_api/result.rb	/^    def reset$/;"	f	class:BitBucket.Result
resolution	lib/bitbucket_rest_api/error/client_error.rb	/^      attr_reader :problem, :summary, :resolution$/;"	f	class:BitBucket.Error.ClientError
respond_to?	lib/bitbucket_rest_api.rb	/^    def respond_to?(method, include_private = false)$/;"	F	class:BitBucket
response_headers	lib/bitbucket_rest_api/error.rb	/^      attr_reader :response_message, :response_headers$/;"	f	class:BitBucket.Error.BitBucketError
response_message	lib/bitbucket_rest_api/error.rb	/^      attr_reader :response_message, :response_headers$/;"	f	class:BitBucket.Error.BitBucketError
response_type	lib/bitbucket_rest_api/response.rb	/^    def response_type(env)$/;"	f	class:BitBucket.Response
ruby_18	lib/bitbucket_rest_api/compatibility.rb	/^  def ruby_18 #:nodoc:$/;"	f	class:Object
ruby_18	lib/bitbucket_rest_api/compatibility.rb	/^  def ruby_18 #:nodoc:$/;"	f	class:Object
ruby_19	lib/bitbucket_rest_api/compatibility.rb	/^  def ruby_19 #:nodoc:$/;"	f	class:Object
ruby_19	lib/bitbucket_rest_api/compatibility.rb	/^  def ruby_19 #:nodoc:$/;"	f	class:Object
search	lib/bitbucket_rest_api/client.rb	/^    def search(options = {})$/;"	f	class:BitBucket.Client
server	lib/bitbucket_rest_api/result.rb	/^    def server$/;"	f	class:BitBucket.Result
services	lib/bitbucket_rest_api/repos.rb	/^    def services$/;"	f	class:BitBucket.Repos
set_api_client	lib/bitbucket_rest_api/api.rb	/^    def set_api_client$/;"	f	class:BitBucket.API
set_defaults	lib/bitbucket_rest_api/configuration.rb	/^    def set_defaults$/;"	f	class:BitBucket.Configuration
setup	lib/bitbucket_rest_api/api.rb	/^    def setup(options={})$/;"	f	class:BitBucket.API
shift	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def shift$/;"	f	class:BitBucket.CoreExt.OrderedHash
sources	lib/bitbucket_rest_api/repos.rb	/^    def sources$/;"	f	class:BitBucket.Repos
stack	lib/bitbucket_rest_api/connection.rb	/^    def stack(options={}, &block)$/;"	f	class:BitBucket.Connection
status	lib/bitbucket_rest_api/result.rb	/^    def status$/;"	f	class:BitBucket.Result
success?	lib/bitbucket_rest_api/result.rb	/^    def success?$/;"	f	class:BitBucket.Result
summary	lib/bitbucket_rest_api/error/client_error.rb	/^      attr_reader :problem, :summary, :resolution$/;"	f	class:BitBucket.Error.ClientError
tags	lib/bitbucket_rest_api/repos.rb	/^    def tags(user_name, repo_name, params={ })$/;"	f	class:BitBucket.Repos
teams	lib/bitbucket_rest_api/client.rb	/^    def teams(options = {})$/;"	f	class:BitBucket.Client
unescape	lib/bitbucket_rest_api/utils/url.rb	/^      def unescape(s) CGI.unescape s.to_s end$/;"	f	class:BitBucket.Utils.Url
update	lib/bitbucket_rest_api/issues/components.rb	/^    def update(user_name, repo_name, component_id, params={})$/;"	f	class:BitBucket.Issues.Components
update	lib/bitbucket_rest_api/issues/milestones.rb	/^    def update(user_name, repo_name, milestone_id, params={})$/;"	f	class:BitBucket.Issues.Milestones
update	lib/bitbucket_rest_api/user.rb	/^    def update( params={ })$/;"	f	class:BitBucket.User
user_api	lib/bitbucket_rest_api/client.rb	/^    def user_api(options = {})$/;"	f	class:BitBucket.Client
users	lib/bitbucket_rest_api/client.rb	/^    def users(options = {})$/;"	f	class:BitBucket.Client
validates_token_for	lib/bitbucket_rest_api/validations/token.rb	/^      def validates_token_for(method, path)$/;"	f	class:BitBucket.Validations.Token
values	lib/bitbucket_rest_api/core_ext/ordered_hash.rb	/^        def values$/;"	f	class:BitBucket.CoreExt.OrderedHash
warn_deprecation	lib/bitbucket_rest_api/deprecation.rb	/^    def warn_deprecation(message)$/;"	F	class:BitBucket
